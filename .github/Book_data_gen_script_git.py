{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "03dcc1d1-abfd-49ca-b1ee-522cb74625dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Данные за 2025-01-29 добавлены.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import random\n",
    "import os\n",
    "from datetime import datetime, timedelta\n",
    "import requests\n",
    "\n",
    "# Путь для сохранения файла с данными\n",
    "data_file = \"data/books_data_v2.csv\"\n",
    "\n",
    "# Города России\n",
    "cities = [\n",
    "    \"Москва\", \"Санкт-Петербург\", \"Новосибирск\", \"Екатеринбург\", \"Казань\", \"Нижний Новгород\",\n",
    "    \"Челябинск\", \"Самара\", \"Омск\", \"Ростов-на-Дону\", \"Уфа\", \"Красноярск\"\n",
    "]\n",
    "\n",
    "# Категории книг\n",
    "book_categories = [\n",
    "    \"Фантастика\", \"Научная литература\", \"Роман\", \"Бизнес\", \"Детектив\", \"История\", \"Психология\",\n",
    "    \"Проза\", \"Саморазвитие\", \"Классика\", \"Фэнтези\", \"Здоровье\", \"Комикс\"]\n",
    "\n",
    "# Устройства пользователей\n",
    "devices = [\"iOS\", \"Android\", \"E-Reader\"]\n",
    "\n",
    "# Типы пользователей\n",
    "book_types = [\"audio\", \"reading\"]\n",
    "\n",
    "# Типы подписок\n",
    "purchase_types = [\"monthly_subscription\", \"yearly_subscription\", \"one_time_purchase\"]\n",
    "\n",
    "# A/B группы\n",
    "test_groups = [\"A\", \"B\"]\n",
    "\n",
    "# Прогрессивное увеличение базы пользователей\n",
    "start_user_id = 1000\n",
    "user_growth_rate = random.randint(100,200)  # Количество новых пользователей в день\n",
    "\n",
    "# Генерация сложной структуры цен\n",
    "def generate_price(action, purchase_type, category):\n",
    "    base_price = random.uniform(5, 100)  # Базовая цена книги\n",
    "\n",
    "    # Скидка по подписке\n",
    "    if purchase_type == \"monthly_subscription\":\n",
    "        discount = 0.08  # 8% скидка\n",
    "    elif purchase_type == \"yearly_subscription\":\n",
    "        discount = 0.15  # 15% скидка\n",
    "    else:\n",
    "        discount = 0  # Без скидки\n",
    "\n",
    "    # Дополнительные сезонные акции для категорий \"Фантастика\" и \"Детектив\" может добавлять дополнительные скидки (10%) в 20% случаев.\n",
    "    if category in [\"Фантастика\", \"Детектив\"] and random.random() < 0.2: \n",
    "        discount += 0.1  # Дополнительно 10% скидка\n",
    "\n",
    "    # Применение скидки\n",
    "    final_price = base_price * (1 - discount) if action == \"purchase\" else 0\n",
    "    return round(final_price, 2)\n",
    "\n",
    "def generate_timespent(action):\n",
    "    timespent = random.randint(1, 500) if action == \"purchase\" else 0\n",
    "    return timespent\n",
    "\n",
    "def generate_book_type(device):\n",
    "    final_book_type = random.choice(book_types) if device != \"E-Reader\" else \"reading\"\n",
    "    return final_book_type\n",
    "\n",
    "# Генерация ежедневных данных\n",
    "def generate_daily_data(existing_user_count):\n",
    "    current_date = datetime.now().strftime(\"%Y-%m-%d\")\n",
    "    new_users = existing_user_count + user_growth_rate\n",
    "\n",
    "  \n",
    "    daily_data = {\n",
    "        \"date\": [current_date] * user_growth_rate,  # Данные за текущий день\n",
    "        \"user_id\": [random.randint(1, 1000) for _ in range(user_growth_rate)],\n",
    "        \"book_id\": [random.randint(1, 500) for _ in range(user_growth_rate)],\n",
    "        \"category\": [random.choice(book_categories) for _ in range(user_growth_rate)],\n",
    "        \"action\": [random.choice([\"purchase\", \"wishlist\"]) for _ in range(user_growth_rate)],\n",
    "        \"purchase_type\": [random.choice(purchase_types) for _ in range(user_growth_rate)],\n",
    "        \"time_spent_minutes\": [],\n",
    "        \"purchase_price\": [],\n",
    "        \"book_type\": [],\n",
    "        \"device\": [random.choice(devices) for _ in range(user_growth_rate)],\n",
    "        \"city\": [random.choice(cities) for _ in range(user_growth_rate)]\n",
    "        # \"test_group\": [random.choice(test_groups) for _ in range(100)],\n",
    "    }\n",
    "\n",
    "    # Генерация цен с учетом логики\n",
    "    for i in range(user_growth_rate):\n",
    "        action = daily_data[\"action\"][i]\n",
    "        purchase_type = daily_data[\"purchase_type\"][i]\n",
    "        category = daily_data[\"category\"][i]\n",
    "        daily_data[\"purchase_price\"].append(generate_price(action, purchase_type, category))\n",
    "\n",
    "    # Генерация времени чтения:\n",
    "    for i in range(user_growth_rate):\n",
    "        action = daily_data[\"action\"][i]\n",
    "        daily_data[\"time_spent_minutes\"].append(generate_timespent(action))\n",
    "\n",
    "    # Генерация типа книг:\n",
    "    for i in range(user_growth_rate):\n",
    "        device = daily_data[\"device\"][i]\n",
    "        daily_data[\"book_type\"].append(generate_book_type(device))\n",
    "    \n",
    "    return pd.DataFrame(daily_data)\n",
    "\n",
    "# Функция для обновления данных в файле\n",
    "def update_data_file():\n",
    "    # Проверяем существующее количество пользователей\n",
    "    if os.path.exists(data_file):\n",
    "        existing_data = pd.read_csv(data_file)\n",
    "        existing_user_count = existing_data['user_id'].max()\n",
    "    else:\n",
    "        print(f\"Existing data file 'book_app_v2' not found. Script not executed.\")\n",
    "        existing_user_count = start_user_id\n",
    "\n",
    "    # Генерация новых данных\n",
    "    daily_data = generate_daily_data(existing_user_count)\n",
    "\n",
    "    # Обновление данных\n",
    "    if os.path.exists(data_file): \n",
    "        updated_data = pd.concat([existing_data, daily_data], ignore_index=True)\n",
    "    else:\n",
    "        print(f\"Script failed - existing file not update with daily data from {datetime.now().strftime('%Y-%m-%d')}.\")\n",
    "\n",
    "    # Сохраняем обновленные данные в файл\n",
    "    updated_data.to_csv(data_file, index=False)\n",
    "    print(f\"Данные за {datetime.now().strftime('%Y-%m-%d')} добавлены.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    update_data_file()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
